#! /usr/bin/env python

import os
import sys

## check commandline arguments
if not len(sys.argv) == 4:
   print 'usage: make-workspace (--data|--score) directory workspace'

## parse commandline arguments
type = sys.argv[1]
type = type[2:]
directory = sys.argv[2]
workspace = sys.argv[3]

## create data or score workspace.
path = os.path.join(os.path.abspath(directory), workspace)
print 'Creating %s workspace %s ...' % (type, path)
os.mkdir(path)

## make template data driver script as string
template_data_driver_script = '''#! /usr/bin/env python

#from helpers import make_some_data
import baca
import os

if __name__ == '__main__':

   os.system('clear')

   print 'Making data ...'
   #output = make_some_data( )
   #output = 'output = %s' % output 
   #baca.utilities.cache_output(output, 'file_name', __file__)
   print '' '''

## make template score driver script as string
template_score_driver_script = '''#! /usr/bin/env python

from abjad.tools import io
#from helpers import make_some_score
import baca
import os
import sys

if __name__ == '__main__':

   os.system('clear')
   usage = 'usage: some_script.py [--nowrite|--write]'
   write = baca.utilities.check_score_builder_commandline(sys.argv, usage)
   dirname = os.path.abspath(os.path.dirname(__file__))
   template = os.path.join(dirname, 'templates', 'some_template.ly')

   print 'Making some score ...'
   score = make_some_score( )
   name = os.path.join(dirname, 'output', 'some_file_name')
   title = [ ]
   title.append('Score Title')
   io.write_and_show(score, name, template, title, write = write)
   print '' '''

## write template driver script to driver script file
driver = os.path.join(path, 'run.py')

if type == 'data':
   file(driver, 'w').write(template_data_driver_script)
elif type == 'score':
   file(driver, 'w').write(template_score_driver_script)

## make driver script executable
os.system('chmod 755 %s' % driver)

## data workspaces allow import of products created in workspace.
## score workspaces do not allow import of products created in workspace.
## create initializer to allow import of data workspace products only.
if type == 'data':
   init = os.path.join(path, '__init__.py')
   file(init, 'w').write('\n')

## create externalized helpers package for both data and score workspaces.
helpers = os.path.join(path, 'helpers')
os.mkdir(helpers)
init = os.path.join(helpers, '__init__.py')
file(init, 'w').write('\n')

## create output directory for both data and score workspaces.
output = os.path.join(path, 'output')
os.mkdir(output)

## create initializer to allow import of products created
## in data workspace only.
if type == 'data':
   init = os.path.join(output, '__init__.py')
   file(init, 'w').write('\n')

## create templates directory for score workspaces only.
if type == 'score':
   templates = os.path.join(path, 'templates')
   os.mkdir(templates)

## create test directory for data workspaces only.
if type == 'data':
   test = os.path.join(path, 'test')
   os.mkdir(test)

print ''
