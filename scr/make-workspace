#! /usr/bin/env python

import os
import sys

## check commandline arguments
if not len(sys.argv) == 4:
   print 'usage: make-workspace (--data|--score) directory workspace'

## parse commandline arguments
type = sys.argv[1]
type = type[2:]
directory = sys.argv[2]
workspace = sys.argv[3]

## create data or score workspace.
path = os.path.join(os.path.abspath(directory), workspace)
print 'Creating %s workspace %s ...' % (type, path)
os.mkdir(path)

## create main workspace driver script.
## both data and score workspaces implement such a driver.
main = os.path.join(path, workspace + '.py')
file(main, 'w').write('#! /usr/bin/env python\n')

## data workspaces allow import of products created in workspace.
## score workspaces do not allow import of products created in workspace.
## create initializer to allow import of data workspace products only.
if type == 'data':
   init = os.path.join(path, '__init__.py')
   file(init, 'w').write('\n')

## create externalized helpers package for both data and score workspaces.
helpers = os.path.join(path, 'helpers')
os.mkdir(helpers)
init = os.path.join(helpers, '__init__.py')
file(init, 'w').write('\n')

## create output directory for both data and score workspaces.
output = os.path.join(path, 'output')
os.mkdir(output)

## create initializer to allow import of products created
## in data workspace only.
if type == 'data':
   init = os.path.join(output, '__init__.py')
   file(init, 'w').write('\n')

## create templates directory for score workspaces only.
if type == 'score':
   templates = os.path.join(path, 'templates')
   os.mkdir(templates)

## create test directory for data workspaces only.
if type == 'data':
   test = os.path.join(path, 'test')
   os.mkdir(test)
